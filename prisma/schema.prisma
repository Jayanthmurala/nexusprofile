generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model Profile {
  id             String       @id @default(cuid())
  userId         String       @unique
  name           String? // Editable display name (separate from auth displayName)
  bio            String?
  skills         String[] // For students
  expertise      String[] // For faculty
  linkedIn       String?
  github         String? // For students
  twitter        String? // For faculty
  resumeUrl      String? // For students
  avatar         String?
  contactInfo    String?
  phoneNumber    String?
  alternateEmail String? // For students
  experiences    Experience[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  publications     Publication[]
  personalProjects PersonalProject[]
  studentBadges    StudentBadge[]
}

model Experience {
  id          String   @id @default(cuid())
  profileId   String
  area        String // AI, IoT, Machine Learning, etc.
  level       String // Beginner, Intermediate, Advanced, Expert
  yearsExp    Int? // years of experience in this area
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Publication {
  id        String   @id @default(cuid())
  userId    String
  title     String
  link      String?
  year      Int
  createdAt DateTime @default(now())

  profile Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([year])
}

model PersonalProject {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  github      String?
  demoLink    String?
  image       String?
  createdAt   DateTime @default(now())

  profile Profile @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
}

// Badge definition catalog
model BadgeDefinition {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String?
  color       String?
  category    String? // LEADERSHIP, TECHNICAL, COMMUNITY, RESEARCH, PRESENTATION, COLLABORATION, INNOVATION, IMPACT
  rarity      String // COMMON, RARE, EPIC, LEGENDARY
  criteria    String?
  points      Int      @default(10)
  isActive    Boolean  @default(true)
  collegeId   String? // null = global badge, otherwise college-specific
  createdAt   DateTime @default(now())
  createdBy   String?

  awards StudentBadge[]

  @@unique([name, collegeId])
}

// Awarded badges to students
model StudentBadge {
  id            String   @id @default(cuid())
  studentId     String
  badgeId       String
  awardedBy     String
  awardedByName String?
  reason        String
  awardedAt     DateTime @default(now())
  projectId     String?
  eventId       String?

  // relations
  badge   BadgeDefinition @relation(fields: [badgeId], references: [id])
  student Profile         @relation(fields: [studentId], references: [userId], onDelete: Cascade)

  @@unique([badgeId, studentId]) // One badge per user
  @@index([studentId])
  @@index([badgeId])
  @@index([awardedBy])
  @@index([awardedAt])
}

// Badge policies for event creation eligibility
model BadgePolicy {
  id                    String   @id @default(cuid())
  collegeId             String   @unique
  departmentId          String?
  eventCreationRequired Int      @default(8) // badges required for event creation
  categoryDiversityMin  Int      @default(4) // minimum categories required
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("badge_policies")
}

// Cache for badge eligibility to avoid repeated calculations
model BadgeEligibilityCache {
  id          String   @id @default(cuid())
  userId      String   @unique
  canCreate   Boolean  @default(false)
  badgeCount  Int      @default(0)
  categories  String[] // categories covered
  lastChecked DateTime @default(now())
  expiresAt   DateTime

  @@map("badge_eligibility_cache")
}
